name: Build Electron Package

on:
  workflow_dispatch: # Permite disparar o build manualmente
  push:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.10.0'

      - name: Set GH_TOKEN for Windows
        run: echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" >> $env:GITHUB_ENV
        shell: cmd

      - name: Install root dependencies
        run: npm install 

      - name: Install dependencies for client (frontend)
        run: |
          cd client
          npm install --legacy-peer-deps

      - name: Install dependencies for server (backend)
        run: |
          cd server
          npm install

      - name: Build App for Windows
        run: npm run build

      - name: Zip Windows package
        run: zip -r windows-$(node -p "require('./package.json').version").zip dist/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: 'Release notes for v${{ github.run_number }}'
          draft: false
          prerelease: false
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Windows package to GitHub Releases
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows-$(node -p "require('./package.json').version").zip
          asset_name: windows-$(node -p "require('./package.json').version").zip
          asset_content_type: application/zip
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  build-ubuntu:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.10.0'

      - name: Set GH_TOKEN for Ubuntu
        run: |
          echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" >> $GITHUB_ENV

      - name: Install root dependencies
        run: npm install  

      - name: Install dependencies for client (frontend)
        run: |
          cd client
          npm install --legacy-peer-deps

      - name: Install dependencies for server (backend)
        run: |
          cd server
          npm install

      - name: Install required packages for Linux build
        run: sudo apt-get update && sudo apt-get install -y fakeroot rpm 

      - name: Build App for Ubuntu
        run: npm run build

      - name: Zip Ubuntu package
        run: zip -r ubuntu-$(node -p "require('./package.json').version").zip dist/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: 'Release notes for v${{ github.run_number }}'
          draft: false
          prerelease: false
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Ubuntu package to GitHub Releases
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ubuntu-$(node -p "require('./package.json').version").zip
          asset_name: ubuntu-$(node -p "require('./package.json').version").zip
          asset_content_type: application/zip
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

name: Build Electron Package

on:
  workflow_dispatch:
    inputs:
      build-windows:
        description: 'Do you want to build for Windows?'
        required: false
        default: 'yes'
  push:
    branches:
      - main

jobs:
  build-windows:
    if: ${{ github.event.inputs.build-windows == 'yes' }}
    runs-on: windows-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.10.0'

      - name: Install root dependencies
        run: npm install 
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Install dependencies for client (frontend)
        run: |
          cd client
          npm install --legacy-peer-deps
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Install dependencies for server (backend)
        run: |
          cd server
          npm install
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Build App for Windows
        run: npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Zip Windows package
        run: |
          VERSION=$(node -p "require('./package.json').version")
          zip -r "windows-${VERSION}.zip" dist/
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Windows package to GitHub Packages
        run: |
          VERSION=$(node -p "require('./package.json').version")
          curl -X POST \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary "@windows-${VERSION}.zip" \
            "https://uploads.github.com/repos/ElJohnnie/hub-b2c/packages/zip?name=windows-${VERSION}.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  build-ubuntu:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.10.0'

      - name: Set GH_TOKEN for Ubuntu
        run: echo "GITHUB_TOKEN=${{ secrets.GH_TOKEN }}" >> $GITHUB_ENV

      - name: Install root dependencies
        run: npm install  
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Install dependencies for client (frontend)
        run: |
          cd client
          npm install --legacy-peer-deps
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Install dependencies for server (backend)
        run: |
          cd server
          npm install
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Install required packages for Linux build
        run: sudo apt-get update && sudo apt-get install -y fakeroot rpm 
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Build App for Ubuntu
        run: npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Zip Ubuntu package
        run: |
          VERSION=$(node -p "require('./package.json').version")
          zip -r "ubuntu-${VERSION}.zip" dist/
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload Ubuntu package to GitHub Packages
        run: |
          VERSION=$(node -p "require('./package.json').version")
          curl -X POST \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary "@ubuntu-${VERSION}.zip" \
            "https://uploads.github.com/repos/ElJohnnie/hub-b2c/packages/zip?name=ubuntu-${VERSION}.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
